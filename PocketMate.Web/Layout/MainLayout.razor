@inherits LayoutComponentBase

<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" Theme="Configuration.Theme" />
<MudSnackbarProvider />
<MudDialogProvider />
<MudPopoverProvider />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudDrawer Open="@_isDrawerOpen">
                <NavMenu />
            </MudDrawer>
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Outlined.Menu" OnClick="ToggleDrawer" Color="@Color.Inherit" />
                <h1>PocketMate</h1>
                <MudSpacer />
                <MudText Typo="Typo.caption">Welcome, @context.User.Identity?.Name</MudText>
                <MudSwitch T="bool" @bind-Value="_isDarkMode" Class="ma-4" ThumbIcon="@Icons.Material.Filled.Lightbulb" Color="@Color.Inherit" />
            </MudAppBar>
            <MudMainContent>
                <MudContainer Class="mt-4">
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>

    </Authorized>
    <NotAuthorized>
        <MudText>
            <LoginRedirect />
        </MudText>
    </NotAuthorized>
</AuthorizeView>


@code
{
    private bool _isDarkMode = false;
    private MudThemeProvider _mudThemeProvider = null!;
    private bool _isDrawerOpen = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public void ToggleDrawer()
    {
        _isDrawerOpen = !_isDrawerOpen;
    }

}